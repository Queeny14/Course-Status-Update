Welcome to JShell -- Version 17.0.5
|  For an introduction type: /help intro

jshell> /help intro
|  
|                                   intro
|                                   =====
|  
|  The jshell tool allows you to execute Java code, getting immediate results.
|  You can enter a Java definition (variable, method, class, etc), like:  int x = 8
|  or a Java expression, like:  x + x
|  or a Java statement or import.
|  These little chunks of Java code are called 'snippets'.
|  
|  There are also the jshell tool commands that allow you to understand and
|  control what you are doing, like:  /list
|  
|  For a list of commands: /help

jshell> /help
|  Type a Java language expression, statement, or declaration.
|  Or type one of the following commands:
|  /list [<name or id>|-all|-start]
|  	list the source you have typed
|  /edit <name or id>
|  	edit a source entry
|  /drop <name or id>
|  	delete a source entry
|  /save [-all|-history|-start] <file>
|  	Save snippet source to a file
|  /open <file>
|  	open a file as source input
|  /vars [<name or id>|-all|-start]
|  	list the declared variables and their values
|  /methods [<name or id>|-all|-start]
|  	list the declared methods and their signatures
|  /types [<name or id>|-all|-start]
|  	list the type declarations
|  /imports 
|  	list the imported items
|  /exit [<integer-expression-snippet>]
|  	exit the jshell tool
|  /env [-class-path <path>] [-module-path <path>] [-add-modules <modules>] ...
|  	view or change the evaluation context
|  /reset [-class-path <path>] [-module-path <path>] [-add-modules <modules>]...
|  	reset the jshell tool
|  /reload [-restore] [-quiet] [-class-path <path>] [-module-path <path>]...
|  	reset and replay relevant history -- current or previous (-restore)
|  /history [-all]
|  	history of what you have typed
|  /help [<command>|<subject>]
|  	get information about using the jshell tool
|  /set editor|start|feedback|mode|prompt|truncation|format ...
|  	set configuration information
|  /? [<command>|<subject>]
|  	get information about using the jshell tool
|  /! 
|  	rerun last snippet -- see /help rerun
|  /<id> 
|  	rerun snippets by ID or ID range -- see /help rerun
|  /-<n> 
|  	rerun n-th previous snippet -- see /help rerun
|  
|  For more information type '/help' followed by the name of a
|  command or a subject.
|  For example '/help /list' or '/help intro'.
|  
|  Subjects:
|  
|  intro
|  	an introduction to the jshell tool
|  keys
|  	a description of readline-like input editing
|  id
|  	a description of snippet IDs and how use them
|  shortcuts
|  	a description of keystrokes for snippet and command completion,
|  	information access, and automatic code generation
|  context
|  	a description of the evaluation context options for /env /reload and /reset
|  rerun
|  	a description of ways to re-evaluate previously entered snippets

jshell> /list -all

  s1 : import java.io.*;
  s2 : import java.math.*;
  s3 : import java.net.*;
  s4 : import java.nio.file.*;
  s5 : import java.util.*;
  s6 : import java.util.concurrent.*;
  s7 : import java.util.function.*;
  s8 : import java.util.prefs.*;
  s9 : import java.util.regex.*;
 s10 : import java.util.stream.*;

jshell> /list -start

  s1 : import java.io.*;
  s2 : import java.math.*;
  s3 : import java.net.*;
  s4 : import java.nio.file.*;
  s5 : import java.util.*;
  s6 : import java.util.concurrent.*;
  s7 : import java.util.function.*;
  s8 : import java.util.prefs.*;
  s9 : import java.util.regex.*;
 s10 : import java.util.stream.*;

jshell> {
   ...>     

jshell> /exit
|  Goodbye
queeny@administrator-OptiPlex-3050:~$ jshell
|  Welcome to JShell -- Version 17.0.5
|  For an introduction type: /help intro

jshell> System.out.print("Hello World");
Hello World
jshell> System.out.print("Hello Queeny");
Hello Queeny
jshell> int myFirstNumber = 5;
myFirstNumber ==> 5

jshell> System.out.print(myFirstNumber)
5
jshell> System.out.print(myFirstNumber);
5
jshell> mmyFirstNumber = 10 + 5;
|  Error:
|  cannot find symbol
|    symbol:   variable mmyFirstNumber
|  mmyFirstNumber = 10 + 5;
|  ^------------^

jshell> myFirstNumber = 10 + 5;
myFirstNumber ==> 15

jshell> myFirstNumber = (10+5) + (2*10);
myFirstNumber ==> 35

jshell> myFirstNumber = (10+5) + (2*10);
myFirstNumber ==> 35

jshell> mySecondNumber = 12;
|  Error:
|  cannot find symbol
|    symbol:   variable mySecondNumber
|  mySecondNumber = 12;
|  ^------------^

jshell> int mySecondNumber = 12;
mySecondNumber ==> 12

jshell> int myThirdNumber = 6;
myThirdNumber ==> 6

jshell> /var
|    int myFirstNumber = 35
|    int mySecondNumber = 12
|    int myThirdNumber = 6

jshell> int total = myFirstNumber + mySecondNumber + myThirdNumber;
total ==> 53

jshell> int myMinIntValue = Integer.MIN_VALUE;
myMinIntValue ==> -2147483648

jshell>  int myMaxIntValue = Integer.MAX_VALUE;
myMaxIntValue ==> 2147483647

jshell> System.out.print("Integer Minimum Value = " + myMinIntValue);
Integer Minimum Value = -2147483648
jshell> System.out.print("Integer Maximum Value = " + myMaxIntValue);
Integer Maximum Value = 2147483647
jshell> System.out.print("Integer Value Range(" + Integer.MIN_VALUE + "to" + Integer.MAX_VALUE + ")");
Integer Value Range(-2147483648to2147483647)
jshell> System.out.print("Busted Max Value = " + (myMaxIntValue + 1));
Busted Max Value = -2147483648
jshell> System.out.print("Busted Min Value = " + (myMinIntValue - 1));
Busted Min Value = 2147483647     Minimum Value = " + myMinIntValue);
Integer Minimum Value = -2147483648
jshell> System.out.print("Byte Value Range(" + Byte.MIN_VALUE + "to" + Byte.MAX_VALUE + ")");
Byte Value Range(-128to127)
jshell> System.out.print("Short Value Range(" + Short.MIN_VALUE + "to" + Short.MAX_VALUE + ")");
Short Value Range(-32768to32767)
jshell> long myLongValue = 100L;
myLongValue ==> 100

                                                 ^

jshell> short myMinShortValue = Short.MIN_VALUE; int myMinIntValue = Integer.MIN_VALUE;
myMinShortValue ==> -32768
myMinIntValue ==> -2147483648

jshell> byte myMinByteValue = Byte.MIN_VALUE, myMaxByteValue = Byte.MAX_VALUE;
myMinByteValue ==> -128
myMaxByteValue ==> 127

jshell> int myTotal = (myMinIntValue / 2);
myTotal ==> -1073741824

jshell> byte myNweByteValue = (myMinByteValue / 2)
|  Error:
|  incompatible types: possible lossy conversion from int to byte
|  byte myNweByteValue = (myMinByteValue / 2);
|                         ^----------------^

jshell> byte myMinByteValue = Byte.MIN_VALUE, myMaxByteValue = Byte.MAX_VALUE;
myMinByteValue ==> -128
myMaxByteValue ==> 127

jshell> byte myNweByteValue = (byte)(myMinByteValue/2);
myNweByteValue ==> -64

jshell> System.out.print("Float Value Range(" + Float.MIN_VALUE + " to " + Float.MAX_VALUE + ")" );
Float Value Range(1.4E-45 to 3.4028235E38)
jshell> System.out.print("Float Value Range(" + Double.MIN_VALUE + " to " + Double.MAX_VALUE + ")" );
Float Value Range(4.9E-324 to 1.7976931348623157E308)
jshell> int myIntValue = 5; float myFloatValue = 5; double myDoubleValue = 5;
myIntValue ==> 5
myFloatValue ==> 5.0
myDoubleValue ==> 5.0

jshell> myFloatValue = 5f;
myFloatValue ==> 5.0

jshell> myDoubleValue = 5d;
myDoubleValue ==> 5.0

jshell> float myOtherFloatValue = 5f;
myOtherFloatValue ==> 5.0

jshell> myDoubleValue = 5d;
myDoubleValue ==> 5.0

jshell> float myOtherFloatValue = 5.25;
|  Error:
|  incompatible types: possible lossy conversion from double to float
|  float myOtherFloatValue = 5.25;
|                            ^--^

jshell> float myOtherFloatValue = (float) 5.25;
myOtherFloatValue ==> 5.25

jshell> float myOtherFloatValue = 5.25f;
myOtherFloatValue ==> 5.25

jshell> myIntValue = 5/2;
myIntValue ==> 2

jshell> myFloatValue = 5f/2f;
myFloatValue ==> 2.5

jshell> myDoubleValue = 5d/2d;
myDoubleValue ==> 2.5

jshell> myIntValue = 5/3;
myIntValue ==> 1

jshell> myFloatValue = 5f/3f;
myFloatValue ==> 1.6666666

jshell> myDoubleValue = 5d/3d;
myDoubleValue ==> 1.6666666666666667

jshell> myDoubleValue = 5.00 / 3.00;
myDoubleValue ==> 1.6666666666666667

jshell> double numberOfPounds = 200d;
numberOfPounds ==> 200.0

jshell> double convertedKilograms = numberOfPounds * 0.45359237d;
convertedKilograms ==> 90.718474

jshell> {
   ...>     String numberString = "250.55";
   ...>     numberString = numberString + "49.45";
   ...>     System.out.print(numberString);
   ...> }
250.5549.45
jshell> {
   ...>     String numberString = "250.55";
   ...>     numberString = numberString + "49.45";
   ...>     System.out.print(numberString);
   ...> }
250.5549.45
jshell> String lastString = "10";
lastString ==> "10"

jshell> String lastString = "10"; int myInt = 50;
lastString ==> "10"
myInt ==> 50

jshell> lastString = lastString + myInt;
lastString ==> "1050"

jshell> double doubleNumber = 120.47; lastString = lastString + doubleNumber;
doubleNumber ==> 120.47
lastString ==> "1050120.47"

jshell> 

